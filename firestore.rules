// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId}/savedArticles/{articleId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Keep existing rules
    match /users/{userId}/history/{analysisId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        (resource.data.authorId == request.auth.uid) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'dislikes']))
      );
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (
          resource.data.authorId == request.auth.uid || 
          get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid
        );
      }
    }
    
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
